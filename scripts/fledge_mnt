#!/bin/bash

##--------------------------------------------------------------------
## Fledge "management" - script to check/recovery fledge
##
## Copyright (c) 2021 Dianomic Systems
##
## Released under the Apache 2.0 Licence
##
## Author: Stefano Simonelli
##
##--------------------------------------------------------------------

set -e
#set -x

#
# FLEDGE_ROOT evaluation
#
if [ "${FLEDGE_ROOT}" = "" ]; then
	FLEDGE_ROOT=/usr/local/fledge
fi

if [ ! -d "${FLEDGE_ROOT}" ]; then
	logger "Fledge home directory missing or incorrectly set environment"
	exit 1
fi

#
# fledge command evaluation
#
FLEDGE_SCRIPT="${FLEDGE_ROOT}/scripts/fledge"
if [ ! -x "${FLEDGE_SCRIPT}" ]; then

    FLEDGE_SCRIPT="${FLEDGE_ROOT}/bin/fledge"
    if [ ! -x "${FLEDGE_SCRIPT}" ]; then

	    logger "Fledge command unavailable both in deployment and development environments"
	    exit 1
    else
        FLEDGE_ENV="deployment"
    fi
else
    FLEDGE_ENV="development"
fi


#// FIXME_I: identify the newer one for the recover command
#
# sqlite3 command selection - identify the newer one for the availability of th recover command
#
SQLITE_SQL="${HOME}/bin/sqlite3"
if ! [[ -x "${SQLITE_SQL}" ]]; then

    SQLITE_SQL="$FLEDGE_ROOT/plugins/storage/sqlite/sqlite3"
    if ! [[ -x "${SQLITE_SQL}" ]]; then

        # Check system default SQLite 3 command line is available
        if ! [[ -x "$(command -v sqlite3)" ]]; then
            sqlite_log "info" "The sqlite3 command cannot be found. Is SQLite3 installed?" "outonly" "pretty"
            sqlite_log "info" "If SQLite3 is installed, check if the bin dir is in the PATH." "outonly" "pretty"
            exit 1
        else
            SQLITE_SQL="$(command -v sqlite3)"
        fi
    fi
fi

#
# Configurations
#
FLEDGE_MNT_VERSION=1.0
FLEDGE_DB="${FLEDGE_ROOT}/data/fledge.db"

#
# Functions
#
fledge_stop() {

    seconds=5
    ${FLEDGE_SCRIPT} stop

    echo "sleeping ${seconds} seconds before fledge kill, to ensure everything is not running"
    sleep ${seconds}
    ${FLEDGE_SCRIPT} kill
}

operation_start() {

    operation="${1}"

    echo ""
    echo "${operation}"
    echo "Operation started : $(date)"

}

fledge_check() {

    operation_start "Executing database check"
    fledge_stop

    echo -n "Checking database consistency : "
    time "${SQLITE_SQL}" "${FLEDGE_DB}" "pragma integrity_check;"
}



fledge_info_table() {
    fledge_table=$1
    count=$2

    echo "Information on the table : ${fledge_table}"

    echo -en "\tMIN Id : "
    "${SQLITE_SQL}" "${FLEDGE_DB}" "SELECT min(id) FROM ${fledge_table} "

    echo -en "\tMAX Id : "
    "${SQLITE_SQL}" "${FLEDGE_DB}" "SELECT max(id) FROM ${fledge_table} "

    if [[ "${count}" == "count" ]]; then

        echo -en "\tCOUNT  : "
        "${SQLITE_SQL}" "${FLEDGE_DB}" "SELECT count(id) FROM ${fledge_table} "
    fi

    echo ""
}

fledge_info() {

    operation_start "Information on the database"

    echo "Tables:"
    "${SQLITE_SQL}" "${FLEDGE_DB}" ".tables"
    echo ""

    fledge_info_table "STATISTICS_HISTORY"
    fledge_info_table "TASKS"              "count"
    fledge_info_table "LOG"                "count"

}

#
# Comment code for debug
#
fledge_shrink_table_shrink() {
    fledge_table=$1

    echo "shrinking table ${fledge_table}"

    #// FIXME_I:
    #"${SQLITE_SQL}" "${FLEDGE_DB}" "SELECT * FROM ${fledge_table} LIMIT 10"
    #"${SQLITE_SQL}" "${FLEDGE_DB}" "UPDATE ${fledge_table} SET history_ts = date('now','-10 day') WHERE id <= 10"
    #"${SQLITE_SQL}" "${FLEDGE_DB}" "SELECT COUNT(*) FROM ${fledge_table} "
    "${SQLITE_SQL}" "${FLEDGE_DB}" "DELETE FROM STATISTICS_HISTORY WHERE  history_ts <= date('now','-3 day')"
    #"${SQLITE_SQL}" "${FLEDGE_DB}" "SELECT COUNT(*) FROM ${fledge_table} "

    echo -n "Table ${fledge_table} - number of records : "
    "${SQLITE_SQL}" "${FLEDGE_DB}" "SELECT COUNT(*) FROM ${fledge_table}"

}

fledge_shrink() {

    operation_start "Executing database shrink"

    fledge_stop

    echo -n "Checking database consistency : "
    "${SQLITE_SQL}" "${FLEDGE_DB}" "pragma integrity_check;"

    if [[ "${SHRINK_MODE}" == "table" ]]; then

        fledge_shrink_table_shrink "STATISTICS_HISTORY"
    fi

    echo -n "Shrinking database"
    "${SQLITE_SQL}" "${FLEDGE_DB}" "VACUUM"
    echo ""

    echo -n "Checking database consistency : "
    "${SQLITE_SQL}" "${FLEDGE_DB}" "pragma integrity_check;"
}

fledge_recover_sqlite3() {

    export_execute=""
    export_sql="${FLEDGE_DB}_sql"
    new_db="${FLEDGE_DB}_rec"

    operation_start "Executing SQLITE3 database recovery"
    fledge_stop

    if [[ -f "${export_sql}" ]]; then

        echo ""
        echo "WARNING: the export file ${export_sql} is already present "
        echo ""
        echo -n "Enter YES if you want to import this one without executing the export : "
        read user_answer

        if [[ "$user_answer" != 'YES' ]]; then

            export_execute="yes"
        fi
    else
        export_execute="yes"
    fi

    if [[ "$export_execute" == "yes" ]]; then

        echo -n "exporting database to a sql file"
        time "${SQLITE_SQL}" "${FLEDGE_DB}" ".recover" > "${export_sql}"
        echo ""
    fi

    if [[ -f "${new_db}" ]]; then

        echo ""
        echo "WARNING: the database ${new_db} is already present, deleting it "
        echo ""

        rm ${new_db}
    fi

    echo -n "Creating the new database"
    time ${SQLITE_SQL} "${new_db}" < "${export_sql}"
    echo ""

}

fledge_recover_manual() {

    operation_start "Executing MANUAL database recovery"
    fledge_stop
}

fledge_recover() {

    if [[ "${RECOVER_MODE}" == "manual" ]]; then

        fledge_recover_manual
    else
        fledge_recover_sqlite3
    fi
}


fledge_help() {

    echo ""
    echo "${USAGE}
The script is used to check/recovery fledge
Arguments:
 info              - show information on the database/tables
 check             - check the fledge database, stops Fledge
 shrink            - shrink the database, stops Fledge
 shrink  --table   - delete the content of the statistics_history > 3 days and shrink the database
 recover           - attempt to recover the fledge database using the SQLITE .recover command
 recover --manual  - a custom/manual attempt to recover the fledge database, useful if the SQLITE .recover command fails
 help              - This text"
}


#
# Main code
#

echo ""
echo "Fledge management tool v${FLEDGE_MNT_VERSION}"
echo "Environment     : ${FLEDGE_ENV}"
echo "Database        : ${FLEDGE_DB}"
echo "sqlite3 command : ${SQLITE_SQL}"
echo "sqlite3 version : $(${SQLITE_SQL} --version)"


USAGE="Usage: `basename ${0}` {info|check|shrink --table|recover --manual}"

RECOVER_MODE=''
SHRINK_MODE=''

# Handle commands
case "$1" in
    info)
        fledge_info
        ;;
    check)
        fledge_check
        ;;
    shrink)
        if [ ! -z "$2" ]; then
            if [[ "$2" == "--table" ]]; then

                SHRINK_MODE='table'

                echo ""
                echo "WARNING: This operation will remove the rows older then 3 days in the table STATISTICS_HISTORY"
                echo "'${FLEDGE_DB}'"
                echo -n "Enter YES if you want to continue: "
                read continue_reset

                if [ "$continue_reset" != 'YES' ]; then

                    echo "Operation aborted."
                    # This is ok because it means that the script is called from command line
                    exit 0
                fi
            else
               echo "An invalid option has been entered: $2. Use --table"
               exit 1
            fi
        fi
        fledge_shrink
        ;;
    recover)
        if [ ! -z "$2" ]; then
            if [[ "${2}" == "--manual" ]]; then
                RECOVER_MODE='manual'
            else
               echo "An invalid option has been entered: $2. Use --manual"
               exit 1
            fi
        fi
        fledge_recover
        ;;

    help)
        fledge_help
        ;;
    *)
        echo "${USAGE}"
        exit 1
esac

exit $?
