#!/bin/bash

# Reads configuration setting
source ${SUITE_BASEDIR}/suite.cfg

function pi_web_retrieves_value {

    url_assets_list=""
    url_asset=""
    value=""

    # Retrieves the asset list
    url_assets_list=`curl -s -u  ${PI_SERVER_UID}:${PI_SERVER_PWD} -X GET -k ${url_elements_list} |  jq --raw-output '.Items | .[] | select(.Name=="'${OMF_PRODUCER_TOKEN}'")  | .Links | .Elements'`
    echo url_assets_list :${url_assets_list}: >> $RESULT_DIR/$TEST_NAME.1.temp 2>&1

    if [[ "${url_assets_list}" != "" ]]; then

        # Asset Information
        url_asset=`curl -s -u  ${PI_SERVER_UID}:${PI_SERVER_PWD} -X GET -k ${url_assets_list} |  jq --raw-output '.Items | .[] | select(.Name=="'${ASSET_CODE}'") | .Links | .EndValue'`
        echo url_asset :${url_asset}: >> $RESULT_DIR/$TEST_NAME.1.temp 2>&1
    fi

    if [[ "${url_asset}" != "" ]]; then

        # Value
        value=`curl -s -u  ${PI_SERVER_UID}:${PI_SERVER_PWD} -X GET -k ${url_asset} |  jq --raw-output '.Items | .[] | select(.Name=="sensor") | .Value | .Value'`
        echo value :${value}: >> $RESULT_DIR/$TEST_NAME.1.temp 2>&1
    fi

    echo ${value}
}

#
# MAIN
#

#
# Drills down into PI-WEB information to extract the expected value from the PI-Server
#
url_databases=`curl -s -u  ${PI_SERVER_UID}:${PI_SERVER_PWD} -X GET -k https://${PI_SERVER}/piwebapi/assetservers | jq --raw-output '.Items | .[] | .Links | .Databases '`
echo url_Databases :${url_databases}: >> $RESULT_DIR/$TEST_NAME.1.temp 2>&1

#
url_elements=`curl -s -u  ${PI_SERVER_UID}:${PI_SERVER_PWD} -X GET -k ${url_databases} |  jq --raw-output '.Items | .[] | select(.Name=="'${PI_SERVER_DATABASE}'") | .Links | .Elements'`
echo url_Elements :${url_elements}: >> $RESULT_DIR/$TEST_NAME.1.temp 2>&1

#
url_elements_list=`curl -s -u  ${PI_SERVER_UID}:${PI_SERVER_PWD} -X GET -k ${url_elements} |  jq --raw-output '.Items | .[] | .Links | .Elements'`
echo url_Elements_list :${url_elements_list}: >> $RESULT_DIR/$TEST_NAME.1.temp 2>&1

# Waits until either the data is available in the PI-SERVER or it reaches the timeout
while [ true ]
do

    value=$(pi_web_retrieves_value)

    if [[ "${value}" != "" && "${value}" != *"PI Point not found"* ]]; then

        echo Value reached - N. of retries :${count}:
        echo ${value}
        exit 0
    else
        if [[ $count -le ${RETRY_COUNT} ]]
        then
            sleep 1
            count=$((count+1))
        else
            echo Timeout reached - N. of retries :${count}:
            exit 1
        fi
    fi
done
