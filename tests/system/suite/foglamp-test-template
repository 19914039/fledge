#!/bin/bash
##############################################################################
#
# FogLAMP Test template
# Copyright (C) 2018 Dianomic Systems, Inc.
#
##############################################################################


##############################################################################
#
## This is a template to run create system tests
#
##############################################################################

set -e
#set -x

debug_mode=""
test_to_run="0"
print_help=false

# FOGLAMP_ROOT and FOGLAMP_DATA change these variables if you know the tests are going to need them
# Alternatively, let the script find FogLAMP
FACTORY_SETTING_ROOT="/usr/local/foglamp"
FACTORY_SETTING_DATA="/usr/local/foglamp/data"

SUITE_SCRIPT=`basename ${0}`
SUITE_NAME="`echo $SUITE_SCRIPT | sed 's/foglamp-test-//'`"
TEST_NAMES=""


## Script Header
print_header() {

  echo "##### FogLAMP System Test #####"

}


## Script variables print
print_vars() {

  echo "Script Name:  $SUITE_NAME"
  echo "Script Suite: $SUITE_SCRIPT"
  echo "Suite DIR:    $SUITE_BASEDIR"
  echo "Test DIR:     $TEST_BASEDIR"
  echo

}


## Set FogLAMP variables
set_env_vars() {

  # Check if a foglamp command exists - that usually means that a snap is installed
  if ! [[ -x "$(command -v foglamp)" ]]; then

    # Check FOGLAMP_ROOT and set it if it does not exist
    if [ -z ${FOGLAMP_ROOT+x} ]; then
      FOGLAMP_ROOT="$FACTORY_SETTING_ROOT"
      export FOGLAMP_ROOT
    fi

    # Check if the FOGLAMP_ROOT directory exists
    if [[ ! -d "${FOGLAMP_ROOT}" ]]; then
      echo "$SUITE_SCRIPT cannot be executed:"
      echo "- foglamp is not a valid command"
      echo "- ${FOGLAMP_ROOT} is not a valid directory."
      exit 1
    else
      if [[ ! -x "${FOGLAMP_ROOT}/bin/foglamp" ]] && [[ ! -x "${FOGLAMP_ROOT}/scripts/foglamp" ]]; then
        echo "$SUITE_SCRIPT cannot be executed: the foglamp script is not present in ${FOGLAMP_ROOT}."
        exit 1
      fi
    fi
  fi

  # Set the suite dir
  SUITE_BASEDIR=`realpath $SUITE_NAME`

  # Set the test dir
  TEST_BASEDIR=`realpath ../tests`

} 


## Get the file name of a test
extract_file_test_name() {
  file_name=`basename $1`
  echo $file_name | sed 's/.test$//'
}


## Get the comments in a test file of the suite
extract_comments_from_file_test() {
  comment=`grep '^## ' $1 | sed 's/^## //'`
  echo $comment
}
  

## Get the test files from the test file suite
extract_test_files() {
  test_files=`grep '^\. \$TEST_BASEDIR/' $1 | sed 's/^\. \$TEST_BASEDIR\///' | sed 's/.bash$//'`
  echo $test_files
}


## Clean the results directory
cleanup_results() {
  rm $SUITE_BASEDIR/r/*.result
}


##  Print the help screen
do_help() {

	echo
	echo "foglamp-test-template : Execute the FogLAMP Template Test Suite"
  echo
  echo "Parameters:"
	echo " -h | --help                Print this help"
  echo " -l | --list                Print the list of tests to execute"
	echo
  echo "Environment Variables:"
  echo " FOGLAMP_ROOT (default: /usr/local/foglamp)"
  echo "            - The root directory for FogLAMP"
  echo " FOGLAMP_DATA (default: /usr/local/foglamp/data"
  echo "            - The data directory for FogLAMP"
  echo ""

}


## Print the list of tests
do_list() {

  echo "Tests:"

  for test_file in $TEST_NAMES; do
    test_name=$(extract_file_test_name $test_file)
    test_comment=$(extract_comments_from_file_test $test_file)
    row_to_print="${test_name}: ${test_comment}"
    echo "$row_to_print"

    test_files=$(extract_test_files $test_file)
    for single_test_file in ${test_files}; do
      desc_file="${TEST_BASEDIR}/${single_test_file}.desc"

      if [[ -e "${desc_file}" ]]; then
        desc=`cat ${desc_file}`
      else
        desc=""
      fi
      echo "   > ${single_test_file}: ${desc}"
    done
  done

  echo
	exit 0

}


##################
### MAIN LOGIC ###
##################

# Check if the suite name is valid
if [[ $SUITE_SCRIPT != foglamp-test* ]]; then
  echo "$SUITE_SCRIPT is not a valid suite name."
  exit 1
fi

### Parameter Check ###
while [ "$1" != "" ]; do
  case "$1" in
    -d | --debug )
      set -x
			debug_mode="debug"
      ;;
    -t | --test )
      shift
      test_to_run=$1
      ;;
    -l | --list )
      print_list=true
      ;;
    -h | --help )
      do_help
      exit 0
      ;;
    * )
      echo "Usage: $SUITE_NAME --help"
      exit 1
      ;;
  esac
  shift
done

print_header
set_env_vars
print_vars

## Fill the TEST_NAMES variable with the tests to run
TEST_NAMES=$SUITE_BASEDIR/t/*.test

if [ "${print_list}" = true ]; then

  do_list
  exit 0

else

  cleanup_results
  echo "Test Start: $(date +'%Y-%m-%d %H:%M:%S.%6N')"
  test_start=$SECONDS
  sleep 2
  elapsed_time=$(( SECONDS - test_start ))
  echo "Total Execution Time: $elapsed_time seconds."
  echo "Test End:   $(date +'%Y-%m-%d %H:%M:%S.%6N')"

fi

exit 0

