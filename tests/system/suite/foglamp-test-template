#!/bin/bash
##############################################################################
#
# FogLAMP Test template
# Copyright (C) 2018 Dianomic Systems, Inc.
#
##############################################################################


##############################################################################
#
## This is a template to run create system tests
#
##############################################################################

set -e

debug_mode=""
test_to_run="0"
print_help=false

# FOGLAMP_ROOT and FOGLAMP_DATA change these variables if you know the tests are going to need them
# Alternatively, let the script find FogLAMP
FACTORY_SETTING_ROOT="/usr/local/foglamp"
FACTORY_SETTING_DATA="/usr/local/foglamp/data"

SUITE_SCRIPT=`basename ${0}`
SUITE_NAME="`echo $SUITE_SCRIPT | sed 's/foglamp-test-//'`"


## Script Header
print_header() {

  echo "##### FogLAMP System Test #####"

}


## Script variables print
print_vars() {

  echo "Script Name:  $SUITE_NAME"
  echo "Script Suite: $SUITE_SCRIPT"
  echo "Suite DIR:    $SUITE_BASEDIR"
  echo "Test DIR:     $TEST_BASEDIR"

}


## Set FogLAMP variables
set_env_vars() {

  # Check if a foglamp command exists - that usually means that a snap is installed
  if ! [[ -x "$(command -v foglamp)" ]]; then

    # Check FOGLAMP_ROOT and set it if it does not exist
    if [ -z ${FOGLAMP_ROOT+x} ]; then
      FOGLAMP_ROOT="$FACTORY_SETTING_ROOT"
      export FOGLAMP_ROOT
    fi

    # Check if the FOGLAMP_ROOT directory exists
    if [[ ! -d "${FOGLAMP_ROOT}" ]]; then
      echo "$SUITE_SCRIPT cannot be executed:"
      echo "- foglamp is not a valid command"
      echo "- ${FOGLAMP_ROOT} is not a valid directory."
      exit 1
    else
      if [[ ! -x "${FOGLAMP_ROOT}/bin/foglamp" ]] && [[ ! -x "${FOGLAMP_ROOT}/scripts/foglamp" ]]; then
        echo "$SUITE_SCRIPT cannot be executed: the foglamp script is not present in ${FOGLAMP_ROOT}."
        exit 1
      fi
    fi
  fi

  # Set the suite dir
  SUITE_BASEDIR=`realpath $SUITE_NAME`

  # Set the test dir
  TEST_BASEDIR=`realpath ../test`

} 


##  Print the help screen
do_help() {

	echo
	echo "foglamp-test-template : Execute the FogLAMP Template Test Suite"
  echo
  echo "Parameters:"
  echo " -t | --test <test-number>  Execute test number <test-number>"
	echo " -h | --help                Print this help"
	echo " -d | --debug               The script is executed with set +x"
	echo
  echo "Environment Variables:"
  echo " FOGLAMP_ROOT (default: /usr/local/foglamp)"
  echo "            - The root directory for FogLAMP"
  echo " FOGLAMP_DATA (default: /usr/local/foglamp/data"
  echo "            - The data directory for FogLAMP"
  echo ""
  echo "Tests:"
  echo
	exit 0

}


## Test 001: Create Table
do_001_create_table () {

  cd ${MYSQL_TEST_FRAMEWORK_BASEDIR}
  ./mysql-test-run ${MYSQL_CONNECTION} \
      --vardir=${SCALEDB_TEST_VAR}  \
      --suite=${SCALEDB_TEST_BASEDIR}/suite/performance \
      --do-test=001_create_table

}


## Test 002: First Insert
do_002_first_insert () {

  cd ${MYSQL_TEST_FRAMEWORK_BASEDIR}
  ./mysql-test-run ${MYSQL_CONNECTION} \
      --vardir=${SCALEDB_TEST_VAR}  \
      --suite=${SCALEDB_TEST_BASEDIR}/suite/performance \
      --do-test=002_first_insert

}


## Test 003: Single Inserts
do_003_single_inserts () {

  ${SCALEDB_TEST_BASEDIR}/tests/performance_import/003_single_inserts.py   ${TEST_003_FILE_NAME}

  cd ${MYSQL_TEST_FRAMEWORK_BASEDIR}
  ./mysql-test-run ${MYSQL_CONNECTION} \
      --vardir=${SCALEDB_TEST_VAR}  \
      --suite=${SCALEDB_TEST_BASEDIR}/suite/performance \
      --do-test=003_single_inserts

  # Cleaning the auto-generated file for test #3
  echo ${MESSAGE} > ${TEST_003_FILE_NAME}


}


## Test 004: Multiple Inserts 
do_004_multiple_inserts () {

  ${SCALEDB_TEST_BASEDIR}/tests/performance_import/004_multiple_inserts.py ${TEST_004_FILE_NAME}

  cd ${MYSQL_TEST_FRAMEWORK_BASEDIR}
  ./mysql-test-run ${MYSQL_CONNECTION} \
      --vardir=${SCALEDB_TEST_VAR}  \
      --suite=${SCALEDB_TEST_BASEDIR}/suite/performance \
      --do-test=004_multiple_inserts   \
      --repeat=1000

  # Cleaning the auto-generated file for test #4
  echo ${MESSAGE} > ${TEST_004_FILE_NAME}

}


## Test 005: Flush Table
do_005_flush_table () {

  cd ${MYSQL_TEST_FRAMEWORK_BASEDIR}
  ./mysql-test-run ${MYSQL_CONNECTION} \
      --vardir=${SCALEDB_TEST_VAR}  \
      --suite=${SCALEDB_TEST_BASEDIR}/suite/performance \
      --do-test=005_flush_table

}


## Test 006: Truncate Table
do_006_truncate_table () {

  cd ${MYSQL_TEST_FRAMEWORK_BASEDIR}
  ./mysql-test-run ${MYSQL_CONNECTION} \
      --vardir=${SCALEDB_TEST_VAR}  \
      --suite=${SCALEDB_TEST_BASEDIR}/suite/performance \
      --do-test=006_truncate_table

}


## Execute the test
do_all_tests () {

  # Generate .test files
  ${SCALEDB_TEST_BASEDIR}/tests/performance_import/003_single_inserts.py   ${TEST_003_FILE_NAME}

  # Test - Full suite
  cd ${MYSQL_TEST_FRAMEWORK_BASEDIR}
  ./mysql-test-run ${MYSQL_CONNECTION} \
      --vardir=${SCALEDB_TEST_VAR}  \
      --suite=${SCALEDB_TEST_BASEDIR}/suite/performance

  # Cleaning the auto-generated file for test #3
  echo ${MESSAGE} > ${TEST_003_FILE_NAME}

  do_004_multiple_inserts
  do_005_flush_table
  do_006_truncate_table

}


##################
### MAIN LOGIC ###
##################

# Check if the suite name is valid
if [[ $SUITE_SCRIPT != foglamp-test* ]]; then
  echo "$SUITE_SCRIPT is not a valid suite name."
  exit 1
fi

print_header
set_env_vars
print_vars

### Parameter Check ###
while [ "$1" != "" ]; do
  case "$1" in
    -d | --debug )
      set -x
			debug_mode="debug"
      ;;
    -t | --test )
      shift
      test_to_run=$1
      ;;
    -h | --help )
      print_help=true
      ;;
    * )
      echo "Usage: $SUITE_NAME --help"
      exit 1
      ;;
  esac
  shift
done

### Main Logic ###
if [ "${print_help}" = true ]; then
  do_help
else
  case "$test_to_run" in
    0 )
      do_all_tests
      ;;
    1 ) 
      do_001_create_table
      ;;
    2 )
      do_002_first_insert
      ;;
    3 )
      do_003_single_inserts
      ;;
    4 )
      do_004_multiple_inserts
      ;;
    5 )
      do_005_flush_table
      ;;
    6 )
      do_006_truncate_table
      ;;
    * )
      echo "Usage: $SUITE_NAME --help"
      exit 1
      ;;
  esac
fi

exit 0

